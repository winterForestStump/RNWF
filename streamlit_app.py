import streamlit as st
import pandas as pd
import altair as alt
import requests

st.set_page_config(layout="wide")

def plot_line(text):
    line = alt.Chart(df_structure).mark_line(point=True).encode(
    x=alt.X("Data:T", axis=alt.Axis(title=None, format=("%b %Y"), labelAngle=45)), 
    y=alt.Y(f'{text}:Q', axis=alt.Axis(title=None)),
    tooltip=["Data:T", f'{text}:Q'])
    chart = alt.layer(line).properties(title=f'{text}', width=1000)
    return chart

"""
# Structured information on the Russian National Welfare Fund (RNWF)
"""

"### The volume of the Fund"
df_filtered = pd.read_csv('https://raw.githubusercontent.com/winterForestStump/RNWF/main/data/report/filtered_report.csv', index_col=1)
df_filtered = df_filtered.drop(columns='Unnamed: 0')
st.dataframe(df_filtered, use_container_width=True)

"### The Report"
report = requests.get('https://raw.githubusercontent.com/winterForestStump/RNWF/refs/heads/main/data/report/report.txt').text
st.write(report)
st.write('<p style="font-size: 10px;">The report was generated by Cohere language model "command-r-plus-08-2024": https://docs.cohere.com/v2/docs/command-r-plus</p>', unsafe_allow_html=True)

"### Fund dynamics"
df = pd.read_csv('https://raw.githubusercontent.com/winterForestStump/RNWF/main/data/rnwf.csv')
datetime_invasion = pd.to_datetime('24.02.2022', format='%d.%m.%Y')
line = alt.Chart(df).mark_line(point=True).encode(
    x=alt.X("Date(m,Y):T", axis=alt.Axis(title=None, format=("%b %Y"), labelAngle=45)), 
    y=alt.Y('amount_blnUSD:Q', axis=alt.Axis(title=None)), 
    tooltip = ["Date(m,Y):T", 'amount_blnUSD:Q'])
rule = alt.Chart(pd.DataFrame({'datetime_invasion': [datetime_invasion]})).mark_rule(color='red').encode(x='datetime_invasion:T')
combined_chart_ = alt.layer(line, rule).properties(title='Fund amount in USD', width=1000)
st.altair_chart(combined_chart_, use_container_width=True)

line_1 = alt.Chart(df).mark_line(point=True).encode(
    x=alt.X("Date(m,Y):T", axis=alt.Axis(title=None, format=("%b %Y"), labelAngle=45)), 
    y=alt.Y('amount_blnRUB:Q', axis=alt.Axis(title=None)),
    tooltip = ["Date(m,Y):T", 'amount_blnRUB:Q'])
rule_1 = alt.Chart(pd.DataFrame({'datetime_invasion': [datetime_invasion]})).mark_rule(color='red').encode(x='datetime_invasion:T')
combined_chart_1 = alt.layer(line_1, rule_1).properties(title='Fund amount in RUB', width=1000)
st.altair_chart(combined_chart_1, use_container_width=True)

"### Fund structure dynamics"
df_structure = pd.read_csv('https://raw.githubusercontent.com/winterForestStump/RNWF/main/data/rnwf_structure.csv', index_col=0, header=0, sep=';')
st.dataframe(df_structure, use_container_width=True)

# Format the structure to create plots
df_structure = pd.read_csv('https://raw.githubusercontent.com/winterForestStump/RNWF/main/data/rnwf_structure.csv', header=None, sep=';')
df_structure = df_structure.T
df_structure.rename(columns=df_structure.iloc[0], inplace=True)
df_structure = df_structure[1:] # drop the first row, as it is now the header
df_structure['Data'] = pd.to_datetime(df_structure['Data'], format='%d.%m.%Y', errors='coerce') #for not silent fail
df_structure['Share of liquid assets in the total Fund in USD equivalent'] = df_structure['Share of liquid assets in the total Fund in USD equivalent'].str.replace(',', '.').str.rstrip('%').astype('float')

line = alt.Chart(df_structure).mark_line(point=True).encode(
    x=alt.X("Data:T", axis=alt.Axis(title=None, format=("%b %Y"), labelAngle=45)), 
    y=alt.Y("Volume of liquid assets of the Fund, USD mln:Q"),
    tooltip=["Data:T", 'Volume of liquid assets of the Fund, USD mln:Q'])
percent = alt.Chart(df_structure).mark_line(color='red').encode(
    x=alt.X("Data:T", axis=alt.Axis(title=None, format=("%b %Y"), labelAngle=45)), 
    y=alt.Y('Share of liquid assets in the total Fund in USD equivalent:Q', axis=alt.Axis(title='Share of liquid assets in the total Fund in USD equivalent'), scale=alt.Scale(domain=[0, 1])),
    tooltip=["Data:T", 'Share of liquid assets in the total Fund in USD equivalent:Q'])
combined_chart = alt.layer(line, percent).resolve_scale(y='independent').properties(title='Volume of liquid assets of the Fund, USD mln', width=1000)
st.altair_chart(combined_chart, use_container_width=True)


chart_1 = plot_line("Balance on Federal Treasury accounts with the Bank of the Russia, EUR mln")
st.altair_chart(chart_1, use_container_width=True)

chart_2 = plot_line("Balance on Federal Treasury accounts with the Bank of the Russia, CNY mln")
st.altair_chart(chart_2, use_container_width=True)

chart_3 = plot_line("Balance on Federal Treasury accounts with the Bank of the Russia, GOLD kg")
st.altair_chart(chart_3, use_container_width=True)

chart_4 = plot_line("Balance on Federal Treasury accounts with the Bank of the Russia, RUB mln")
st.altair_chart(chart_4, use_container_width=True)

chart_5 = plot_line("Deposits and subordinated debt with VEB_RF, RUB mln")
st.altair_chart(chart_5, use_container_width=True)

chart_6 = plot_line("Debt obligations of foreign countries, USD mln")
st.altair_chart(chart_6, use_container_width=True)

chart_7 = plot_line("Securities of Russian issuers related to the implementation of self-sustaining infrastructure projects, RUB mln")
st.altair_chart(chart_7, use_container_width=True)

chart_8 = plot_line("Securities of Russian issuers related to the implementation of self-sustaining infrastructure projects, USD mln")
st.altair_chart(chart_8, use_container_width=True)

chart_9 = plot_line("Preferred shares of credit organizations, RUB mln")
st.altair_chart(chart_9, use_container_width=True)

chart_10 = plot_line("Subordinated debt with GAZPROMBANK, RUB mln")
st.altair_chart(chart_10, use_container_width=True)

chart_11 = plot_line("Common stocks, RUB mln")
st.altair_chart(chart_11, use_container_width=True)

chart_12 = plot_line("Preferred shares, RUB mln")
st.altair_chart(chart_12, use_container_width=True)

chart_13 = plot_line("Bonds, RUB mln")
st.altair_chart(chart_13, use_container_width=True)


"### Fund structure"
structure = pd.read_csv("https://raw.githubusercontent.com/winterForestStump/RNWF/main/data/structure.csv", index_col=0, header=None, sep=';')
structure = structure.T
structure.rename(columns=structure.iloc[0], inplace=True)
structure = structure[1:] # drop the first row, as it is now the header
structure['Data'] = pd.to_datetime(structure['Data'], format='%d.%m.%Y', errors='coerce') #for not silent fail
structure = structure.drop(columns=['CBR exchange rate for USD','Volume of the National Wealth Fund, RUB mln'])
structure = structure.melt(id_vars=['Data'], value_vars=['Deposits and subordinated debt with VEB_RF',
                                                         'Debt obligations of foreign countries',
                                                         'Securities related to the implementation of infrastructure projects',
                                                         'Preferred shares and subordinated debt of credit organizations',
                                                         'Common stocks',
                                                         'Preferred shares',
                                                         'Bonds',
                                                         'Liquid assets of the Fund'])


bars = alt.Chart(structure).mark_bar(height=13).encode(
    x=alt.X('sum(value):Q', axis=alt.Axis(title=None)).stack('normalize'),
    y=alt.Y('Data:T', axis=alt.Axis(title=None)),
    color=alt.Color('variable')
)
structure_chart = alt.layer(bars).properties(title='Structure of the fund', width=1000)
st.altair_chart(structure_chart, use_container_width=True)


"### Main recepients of the Fund"
recepients = pd.read_csv('https://raw.githubusercontent.com/winterForestStump/RNWF/main/data/recepients.csv', header=0, sep=';')
st.dataframe(recepients, use_container_width=True)

base = alt.Chart(recepients).encode(
    alt.Theta('RUB, mln:Q').stack(True),
    alt.Color('Entity:N').legend()
).mark_arc(outerRadius=120).properties(width=1000)
st.altair_chart(base, use_container_width=True)
 